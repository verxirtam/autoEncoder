!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ActivateFunction	nn/ActivateFunction.cuh	/^class ActivateFunction$/;"	c	namespace:nn	file:
ActivateMethodElementWise	nn/ActivateMethodElementWise.cuh	/^class ActivateMethodElementWise$/;"	c	namespace:nn	file:
ActivateMethodOutputIdentity	nn/ActivateMethodOutputIdentity.cuh	/^class ActivateMethodOutputIdentity$/;"	c	namespace:nn	file:
AutoEncoder	nn/AutoEncoder.cuh	/^	AutoEncoder():$/;"	f	class:nn::AutoEncoder
AutoEncoder	nn/AutoEncoder.cuh	/^class AutoEncoder$/;"	c	namespace:nn	file:
AutoEncoderTanh	nn/AutoEncoderTanh.cuh	/^using AutoEncoderTanh = AutoEncoder<Func1to1Tanh>;$/;"	u
AutoEncoderType	FXAutoEncoder.cuh	/^	using AutoEncoderType = nn::AutoEncoder<nn::Func1to1Tanh>;$/;"	u
Backpropagation	nn/Backpropagation.cuh	/^	Backpropagation(unsigned int layer_count):$/;"	f	class:nn::Backpropagation
Backpropagation	nn/Backpropagation.cuh	/^class Backpropagation$/;"	c	namespace:nn	file:
BackpropagationException	nn/BackpropagationException.h	/^	BackpropagationException(const char* what_arg):$/;"	f	class:nn::BackpropagationException
BackpropagationException	nn/BackpropagationException.h	/^	BackpropagationException(const std::string& what_arg):$/;"	f	class:nn::BackpropagationException
BackpropagationException	nn/BackpropagationException.h	/^class BackpropagationException : public std::runtime_error$/;"	c	namespace:nn
BackpropagationTanhReg	nn/BackpropagationTanhReg.cuh	/^using BackpropagationTanhReg = Backpropagation<Func1to1Tanh, OutputLayerRegression>;$/;"	u
COMMON_FLAGS	makefile	/^COMMON_FLAGS := -pg -g -O0$/;"	m
CUBLAS_CALL	cuda/CuBlasManager.h	36;"	d
CUDA_CALL	cuda/CudaManager.h	29;"	d
CUDA_SRCS	makefile	/^CUDA_SRCS := $(shell find * -name "*.cu")$/;"	m
CURAND_CALL	cuda/CuRandManager.h	32;"	d
CUSOLVERDN_CALL	cuda/CuSolverDnManager.h	31;"	d
CXXFLAGS	makefile	/^CXXFLAGS := -Wall -fopenmp -I\/usr\/include -I\/usr\/local\/cuda\/include -I$(HOME)\/programs\/ATFViewer\/include $(CXX_LINKS)$/;"	m
CXXONLYFLAGS	makefile	/^CXXONLYFLAGS := -std=c++11 -Weffc++$/;"	m
CXX_LINKS	makefile	/^CXX_LINKS := -L\/usr\/local\/lib -L\/usr\/local\/cuda\/lib64 -lgtest -lsqlite3 -lcudart -lcublas -lcurand -lcusolver$/;"	m
CuBlasException	cuda/CuBlasException.h	/^	CuBlasException(const char* what_arg):$/;"	f	class:cuda::CuBlasException
CuBlasException	cuda/CuBlasException.h	/^	CuBlasException(const std::string& what_arg):$/;"	f	class:cuda::CuBlasException
CuBlasException	cuda/CuBlasException.h	/^class CuBlasException : public std::runtime_error$/;"	c	namespace:cuda
CuBlasManager	cuda/CuBlasManager.h	/^	CuBlasManager():$/;"	f	class:cuda::CuBlasManager
CuBlasManager	cuda/CuBlasManager.h	/^class CuBlasManager$/;"	c	namespace:cuda
CuRandException	cuda/CuRandException.h	/^	CuRandException(const char* what_arg):$/;"	f	class:cuda::CuRandException
CuRandException	cuda/CuRandException.h	/^	CuRandException(const std::string& what_arg):$/;"	f	class:cuda::CuRandException
CuRandException	cuda/CuRandException.h	/^class CuRandException : public std::runtime_error$/;"	c	namespace:cuda
CuRandManager	cuda/CuRandManager.h	/^	CuRandManager():$/;"	f	class:cuda::CuRandManager
CuRandManager	cuda/CuRandManager.h	/^class CuRandManager$/;"	c	namespace:cuda
CuSolverDnException	cuda/CuSolverDnException.h	/^	CuSolverDnException(const char* what_arg):$/;"	f	class:cuda::CuSolverDnException
CuSolverDnException	cuda/CuSolverDnException.h	/^	CuSolverDnException(const std::string& what_arg):$/;"	f	class:cuda::CuSolverDnException
CuSolverDnException	cuda/CuSolverDnException.h	/^class CuSolverDnException : public std::runtime_error$/;"	c	namespace:cuda
CuSolverDnManager	cuda/CuSolverDnManager.h	/^	CuSolverDnManager():$/;"	f	class:cuda::CuSolverDnManager
CuSolverDnManager	cuda/CuSolverDnManager.h	/^class CuSolverDnManager$/;"	c	namespace:cuda
CudaException	cuda/CudaException.h	/^	CudaException(const char* what_arg):$/;"	f	class:cuda::CudaException
CudaException	cuda/CudaException.h	/^	CudaException(const std::string& what_arg):$/;"	f	class:cuda::CudaException
CudaException	cuda/CudaException.h	/^class CudaException : public std::runtime_error$/;"	c	namespace:cuda
CudaManager	cuda/CudaManager.h	/^	CudaManager():$/;"	f	class:cuda::CudaManager
CudaManager	cuda/CudaManager.h	/^class CudaManager$/;"	c	namespace:cuda
CudaStreamContainer	cuda/CudaStreamContainer.h	/^	CudaStreamContainer():$/;"	f	class:cuda::CudaStreamContainer
CudaStreamContainer	cuda/CudaStreamContainer.h	/^class CudaStreamContainer$/;"	c	namespace:cuda
DEPS	makefile	/^DEPS := $(OBJS:.o=.d)$/;"	m
DeviceMatrix	cuda/DeviceMatrix.h	/^	DeviceMatrix():$/;"	f	class:cuda::DeviceMatrix
DeviceMatrix	cuda/DeviceMatrix.h	/^	DeviceMatrix(DeviceMatrix&& dm):$/;"	f	class:cuda::DeviceMatrix
DeviceMatrix	cuda/DeviceMatrix.h	/^	DeviceMatrix(const DeviceMatrix& dm):$/;"	f	class:cuda::DeviceMatrix
DeviceMatrix	cuda/DeviceMatrix.h	/^	DeviceMatrix(int r, int c):$/;"	f	class:cuda::DeviceMatrix
DeviceMatrix	cuda/DeviceMatrix.h	/^	DeviceMatrix(int r, int c, const std::vector<float>& d):$/;"	f	class:cuda::DeviceMatrix
DeviceMatrix	cuda/DeviceMatrix.h	/^class DeviceMatrix$/;"	c	namespace:cuda
DeviceMatrix	nn/AutoEncoder.cuh	/^	using DeviceMatrix = cuda::DeviceMatrix;$/;"	u
DeviceMatrix	nn/Backpropagation.cuh	/^	using DeviceMatrix = cuda::DeviceMatrix;$/;"	u
DeviceMatrix	nn/ElementWiseFunction1to1.cuh	/^	using DeviceMatrix = cuda::DeviceMatrix;$/;"	u
DeviceMatrix	nn/Layer.h	/^	using DeviceMatrix = cuda::DeviceMatrix;$/;"	u
DeviceMatrix	nn/LayerInput.cuh	/^	using DeviceMatrix = cuda::DeviceMatrix;$/;"	u
DeviceMatrix	nn/LayerNull.cuh	/^	using DeviceMatrix = cuda::DeviceMatrix;$/;"	u
DeviceMatrix	nn/Normalization.h	/^	using DeviceMatrix = cuda::DeviceMatrix;$/;"	u
DeviceMatrix	nn/Perceptron.cuh	/^	using DeviceMatrix = cuda::DeviceMatrix;$/;"	u
DeviceMatrix	nn/Serial.h	/^	using DeviceMatrix = cuda::DeviceMatrix;$/;"	u
DeviceMatrix	nn/UpdateMethodMomentum.h	/^	using DeviceMatrix = cuda::DeviceMatrix;$/;"	u
DeviceVector	cuda/DeviceVector.h	/^	DeviceVector(DeviceVector&& dv):$/;"	f	class:cuda::DeviceVector
DeviceVector	cuda/DeviceVector.h	/^	DeviceVector(const DeviceVector& dv):$/;"	f	class:cuda::DeviceVector
DeviceVector	cuda/DeviceVector.h	/^	DeviceVector(const std::initializer_list<float> v):$/;"	f	class:cuda::DeviceVector
DeviceVector	cuda/DeviceVector.h	/^	DeviceVector(const std::vector<float>& v):$/;"	f	class:cuda::DeviceVector
DeviceVector	cuda/DeviceVector.h	/^	DeviceVector(unsigned int d = 0):$/;"	f	class:cuda::DeviceVector
DeviceVector	cuda/DeviceVector.h	/^class DeviceVector$/;"	c	namespace:cuda
DeviceVector	nn/AutoEncoder.cuh	/^	using DeviceVector = cuda::DeviceVector;$/;"	u
DeviceVector	nn/Backpropagation.cuh	/^	using DeviceVector = cuda::DeviceVector;$/;"	u
DeviceVector	nn/ElementWiseFunction1to1.cuh	/^	using DeviceVector = cuda::DeviceVector;$/;"	u
DeviceVector	nn/Layer.h	/^	using DeviceVector = cuda::DeviceVector;$/;"	u
DeviceVector	nn/LayerInput.cuh	/^	using DeviceVector = cuda::DeviceVector;$/;"	u
DeviceVector	nn/LayerNull.cuh	/^	using DeviceVector = cuda::DeviceVector;$/;"	u
DeviceVector	nn/Normalization.h	/^	using DeviceVector = cuda::DeviceVector;$/;"	u
DeviceVector	nn/Serial.h	/^	using DeviceVector = cuda::DeviceVector;$/;"	u
DeviceVector	nn/UpdateMethodMomentum.h	/^	using DeviceVector = cuda::DeviceVector;$/;"	u
DnSsyevd	cuda/CuSolverDnFunction.cpp	/^void DnSsyevd$/;"	f	namespace:cuda
ElementWiseFunction1to1	nn/ElementWiseFunction1to1.cuh	/^class ElementWiseFunction1to1$/;"	c	namespace:nn	file:
ElementWiseFunction2to1	nn/ElementWiseFunction2to1.cuh	/^class ElementWiseFunction2to1$/;"	c	namespace:nn	file:
FXAutoEncoder	FXAutoEncoder.cuh	/^	FXAutoEncoder():$/;"	f	class:FXAutoEncoder
FXAutoEncoder	FXAutoEncoder.cuh	/^class FXAutoEncoder$/;"	c	file:
FXAutoEncoderDBAccessor	FXAutoEncoderDBAccessor.cuh	/^	FXAutoEncoderDBAccessor():$/;"	f	class:FXAutoEncoderDBAccessor
FXAutoEncoderDBAccessor	FXAutoEncoderDBAccessor.cuh	/^	FXAutoEncoderDBAccessor(const std::string& db_file_name):$/;"	f	class:FXAutoEncoderDBAccessor
FXAutoEncoderDBAccessor	FXAutoEncoderDBAccessor.cuh	/^class FXAutoEncoderDBAccessor$/;"	c	file:
Func	nn/ActivateMethodElementWise.cuh	/^		using Func = Func2to1Composite1st<Func2to1ElementWiseProduct, Func1to1ApplyDiff<ActivateFunction> >;$/;"	u
Func	nn/Backpropagation_detail.h	/^	using Func = Func2to1Composite1st<Func2to1ElementWiseProduct, Func1to1ApplyDiff<AF> >;$/;"	u
Func1to1ApplyDiff	nn/ElementWiseFunctionUtil.cuh	/^class Func1to1ApplyDiff$/;"	c	namespace:nn	file:
Func1to1Exp	nn/Func1to1Exp.cuh	/^class Func1to1Exp$/;"	c	namespace:nn	file:
Func1to1Logistic	nn/Func1to1Logistic.cuh	/^class Func1to1Logistic$/;"	c	namespace:nn	file:
Func1to1ReLU	nn/Func1to1ReLU.cuh	/^class Func1to1ReLU$/;"	c	namespace:nn	file:
Func1to1Tanh	nn/Func1to1Tanh.cuh	/^class Func1to1Tanh$/;"	c	namespace:nn	file:
Func2to1Composite1st	nn/ElementWiseFunctionUtil.cuh	/^class Func2to1Composite1st$/;"	c	namespace:nn	file:
Func2to1Composite2nd	nn/ElementWiseFunctionUtil.cuh	/^class Func2to1Composite2nd$/;"	c	namespace:nn	file:
Func2to1ElementWiseDifference	nn/Func2to1ElementWiseDifference.cuh	/^class Func2to1ElementWiseDifference$/;"	c	namespace:nn	file:
Func2to1ElementWiseProduct	nn/Func2to1ElementWiseProduct.cuh	/^class Func2to1ElementWiseProduct$/;"	c	namespace:nn	file:
Func2to1ElementWiseSum	nn/Func2to1ElementWiseSum.cuh	/^class Func2to1ElementWiseSum$/;"	c	namespace:nn	file:
GPROF2DOT	makefile	/^GPROF2DOT := ~\/tools\/gprof2dot\/gprof2dot.py -s$/;"	m
HOME	makefile	/^HOME := $(shell echo ~)$/;"	m
L	unittest_Layer.cuh	/^	using L = Layer<ActivateMethodElementWise<Func1to1ReLU>, UpdateMethodMomentum>;$/;"	u
L	unittest_Serial.cuh	/^	using L = LayerNull;$/;"	u
L0	unittest_Serial.cuh	/^	using L0 = LayerNull;$/;"	u
L1	unittest_Serial.cuh	/^	using L1 = Serial<L0, L0, L0>;$/;"	u
L2	unittest_Serial.cuh	/^	using L2 = Serial<L1, L1, L1>;$/;"	u
Layer	nn/Layer.h	/^	Layer():$/;"	f	class:nn::Layer
Layer	nn/Layer.h	/^class Layer$/;"	c	namespace:nn
LayerInput	nn/LayerInput.cuh	/^	LayerInput():$/;"	f	class:nn::LayerInput
LayerInput	nn/LayerInput.cuh	/^class LayerInput$/;"	c	namespace:nn	file:
LayerInternal	nn/LayerInternal.cuh	/^using LayerInternal = Layer<ActivateMethodElementWise<ActivateFunction>, UpdateMethodMomentum>;$/;"	u
LayerNull	nn/LayerNull.cuh	/^	LayerNull():$/;"	f	class:nn::LayerNull
LayerNull	nn/LayerNull.cuh	/^class LayerNull$/;"	c	namespace:nn	file:
LayerOutputIdentity	nn/LayerOutputIdentity.cuh	/^using LayerOutputIdentity = Layer<ActivateMethodOutputIdentity, UpdateMethodMomentum>;$/;"	u
LayerTest	unittest_Layer.cuh	/^class LayerTest :$/;"	c	file:
MAKETEST_EXIST	makefile	/^MAKETEST_EXIST = glunittest$/;"	m
MAKETEST_NOTEXIST	makefile	/^MAKETEST_NOTEXIST = notexistfile$/;"	m
NVCC	makefile	/^NVCC := nvcc$/;"	m
NVCC_CXX_FLAGS	makefile	/^NVCC_CXX_FLAGS := $(CXXFLAGS:%=-Xcompiler %)$/;"	m
NVCC_FLAGS	makefile	/^NVCC_FLAGS := --std c++11 -G -Wno-deprecated-gpu-targets$/;"	m
NVCC_LINKS	makefile	/^NVCC_LINKS := -lcuda $(CXX_LINKS)$/;"	m
NVPROF	makefile	/^NVPROF := nvprof --csv$/;"	m
NVPROFGRAPH	makefile	/^NVPROFGRAPH := ~\/tools\/nvprof_graph\/nvprof_graph.sh$/;"	m
Normalization	nn/Normalization.h	/^	Normalization():$/;"	f	class:nn::Normalization
Normalization	nn/Normalization.h	/^class Normalization$/;"	c	namespace:nn
OBJDIR	makefile	/^OBJDIR := ..\/obj$/;"	m
OBJS	makefile	/^OBJS := $(addprefix $(OBJDIR)\/, $(SRCS:.cpp=.o) $(CUDA_SRCS:.cu=.o))$/;"	m
OBJSTARGET	makefile	/^OBJSTARGET := $(filter-out $(OBJDIR)\/$(TESTTARGET).o, $(OBJS))$/;"	m
OBJSTEST	makefile	/^OBJSTEST := $(filter-out $(OBJDIR)\/$(TARGET).o, $(OBJS))$/;"	m
OutputLayerMulticlassClassification	nn/OutputLayerMulticlassClassification.cuh	/^class OutputLayerMulticlassClassification$/;"	c	namespace:nn	file:
OutputLayerRegression	nn/OutputLayerRegression.cuh	/^class OutputLayerRegression$/;"	c	namespace:nn	file:
Perceptron	nn/Perceptron.cuh	/^	Perceptron():$/;"	f	class:nn::Perceptron
Perceptron	nn/Perceptron.cuh	/^class Perceptron$/;"	c	namespace:nn	file:
S	unittest_Serial.cuh	/^	using S = L2;$/;"	u
S	unittest_Serial.cuh	/^	using S = Serial<L, L, L>;$/;"	u
SRCS	makefile	/^SRCS := $(shell find * -name "*.cpp")$/;"	m
Samax	cuda/CuBlasFunction.cpp	/^void Samax$/;"	f	namespace:cuda
Samin	cuda/CuBlasFunction.cpp	/^void Samin$/;"	f	namespace:cuda
Sasum	cuda/CuBlasFunction.cpp	/^void Sasum$/;"	f	namespace:cuda
Saxpy	cuda/CuBlasFunction.cpp	/^void Saxpy$/;"	f	namespace:cuda
Sdgmm	cuda/CuBlasFunction.cpp	/^void Sdgmm$/;"	f	namespace:cuda
Sdot	cuda/CuBlasFunction.cpp	/^void Sdot$/;"	f	namespace:cuda
Serial	nn/Serial.h	/^class Serial$/;"	c	namespace:nn
SerialTest	unittest_Serial.cuh	/^class SerialTest :$/;"	c	file:
SetUp	unittest_Layer.cuh	/^	void SetUp(){}$/;"	f	class:LayerTest
SetUp	unittest_Serial.cuh	/^	void SetUp(){}$/;"	f	class:SerialTest
SetUp	unittest_UpdateMethodMomentum.h	/^	void SetUp(){}$/;"	f	class:UpdateMethodMomentumTest
Sgeam	cuda/CuBlasFunction.cpp	/^void Sgeam$/;"	f	namespace:cuda
Sgemm	cuda/CuBlasFunction.cpp	/^void Sgemm$/;"	f	namespace:cuda
Sgemv	cuda/CuBlasFunction.cpp	/^void Sgemv$/;"	f	namespace:cuda
Sger	cuda/CuBlasFunction.cpp	/^void Sger$/;"	f	namespace:cuda
Sscal	cuda/CuBlasFunction.cpp	/^void Sscal$/;"	f	namespace:cuda
Ssymm	cuda/CuBlasFunction.cpp	/^void Ssymm$/;"	f	namespace:cuda
Ssyr	cuda/CuBlasFunction.cpp	/^void Ssyr$/;"	f	namespace:cuda
Ssyrk	cuda/CuBlasFunction.cpp	/^void Ssyrk$/;"	f	namespace:cuda
TARGET	makefile	/^TARGET := $(shell basename `dirname \\`pwd\\``)$/;"	m
TEST	unittest_Layer.cuh	/^TEST(LayerTest, Simple)$/;"	f
TEST	unittest_Serial.cuh	/^TEST(SerialTest, Iteration)$/;"	f
TEST	unittest_Serial.cuh	/^TEST(SerialTest, Simple)$/;"	f
TEST	unittest_UpdateMethodMomentum.h	/^TEST(UpdateMethodMomentumTest, Simple)$/;"	f
TESTOPTION	makefile	/^TESTOPTION := --gtest_color=yes$/;"	m
TESTTARGET	makefile	/^TESTTARGET := unittest$/;"	m
TearDown	unittest_Layer.cuh	/^	void TearDown(){}$/;"	f	class:LayerTest
TearDown	unittest_Serial.cuh	/^	void TearDown(){}$/;"	f	class:SerialTest
TearDown	unittest_UpdateMethodMomentum.h	/^	void TearDown(){}$/;"	f	class:UpdateMethodMomentumTest
TimeUtil	util/TimeUtil.h	/^class TimeUtil$/;"	c
TrackData	TrackData.h	/^class TrackData$/;"	c
UpdateMethodMomentum	nn/UpdateMethodMomentum.h	/^	UpdateMethodMomentum():$/;"	f	class:nn::UpdateMethodMomentum
UpdateMethodMomentum	nn/UpdateMethodMomentum.h	/^class UpdateMethodMomentum$/;"	c	namespace:nn
UpdateMethodMomentumTest	unittest_UpdateMethodMomentum.h	/^class UpdateMethodMomentumTest :$/;"	c
WTdelta	nn/Backpropagation.cuh	/^	std::vector<DeviceMatrix> WTdelta;$/;"	m	class:nn::Backpropagation	file:
_1B	nn/AutoEncoder.cuh	/^	DeviceVector _1B;$/;"	m	class:nn::AutoEncoder	file:
_1B	nn/Backpropagation.cuh	/^	DeviceVector _1B;$/;"	m	class:nn::Backpropagation	file:
_1B	nn/Layer.h	/^	DeviceVector _1B;$/;"	m	class:nn::Layer
_1B	nn/UpdateMethodMomentum.h	/^	DeviceVector _1B;$/;"	m	class:nn::UpdateMethodMomentum
activate	nn/ActivateFunction.cuh	/^	static cuda::DeviceMatrix& activate(const cuda::DeviceMatrix& x, cuda::DeviceMatrix& y)$/;"	f	class:nn::ActivateFunction
activate	nn/ActivateMethodElementWise.cuh	/^	static void activate(const cuda::DeviceMatrix& u, cuda::DeviceMatrix& z)$/;"	f	class:nn::ActivateMethodElementWise
activate	nn/ActivateMethodOutputIdentity.cuh	/^	static void activate(const cuda::DeviceMatrix& u, cuda::DeviceMatrix& z)$/;"	f	class:nn::ActivateMethodOutputIdentity
activateDiff	nn/ActivateFunction.cuh	/^	static cuda::DeviceMatrix& activateDiff(const cuda::DeviceMatrix& x, cuda::DeviceMatrix& y)$/;"	f	class:nn::ActivateFunction
activateFunction	nn/OutputLayerMulticlassClassification.cuh	/^	static void activateFunction(const DeviceMatrix& u, DeviceMatrix& z)$/;"	f	class:nn::OutputLayerMulticlassClassification
activateFunction	nn/OutputLayerRegression.cuh	/^	static void activateFunction(const cuda::DeviceMatrix& u, cuda::DeviceMatrix& z)$/;"	f	class:nn::OutputLayerRegression
altitude	TrackData.h	/^	float altitude;$/;"	m	class:TrackData
apply	nn/ElementWiseFunction1to1.cuh	/^cuda::DeviceMatrix& ElementWiseFunction1to1<Func1to1>::apply(const cuda::DeviceMatrix& x, cuda::DeviceMatrix& y)$/;"	f	class:nn::ElementWiseFunction1to1
apply	nn/ElementWiseFunction2to1.cuh	/^cuda::DeviceMatrix& ElementWiseFunction2to1<Func2to1>::apply(const cuda::DeviceMatrix& x, const cuda::DeviceMatrix& y, cuda::DeviceMatrix& z)$/;"	f	class:nn::ElementWiseFunction2to1
apply	nn/ElementWiseFunctionUtil.cuh	/^	static float apply(float x)$/;"	f	class:nn::Func1to1ApplyDiff
apply	nn/ElementWiseFunctionUtil.cuh	/^	static float apply(float x, float y)$/;"	f	class:nn::Func2to1Composite1st
apply	nn/ElementWiseFunctionUtil.cuh	/^	static float apply(float x, float y)$/;"	f	class:nn::Func2to1Composite2nd
apply	nn/Func1to1Exp.cuh	/^	static float apply(float x)$/;"	f	class:nn::Func1to1Exp
apply	nn/Func1to1Logistic.cuh	/^	static float apply(float x)$/;"	f	class:nn::Func1to1Logistic
apply	nn/Func1to1ReLU.cuh	/^	static float apply(float x)$/;"	f	class:nn::Func1to1ReLU
apply	nn/Func1to1Tanh.cuh	/^	static float apply(float x)$/;"	f	class:nn::Func1to1Tanh
apply	nn/Func2to1ElementWiseDifference.cuh	/^	static float apply(float x, float y)$/;"	f	class:nn::Func2to1ElementWiseDifference
apply	nn/Func2to1ElementWiseProduct.cuh	/^	static float apply(float x, float y)$/;"	f	class:nn::Func2to1ElementWiseProduct
apply	nn/Func2to1ElementWiseSum.cuh	/^	static float apply(float x, float y)$/;"	f	class:nn::Func2to1ElementWiseSum
apply	nn/Serial.h	/^		static const DeviceMatrix& apply(const DeviceMatrix& weight_t_delta, thisType& tt)$/;"	f	struct:nn::Serial::backMain
apply	nn/Serial.h	/^		static const DeviceMatrix& apply(const DeviceMatrix& x, thisType& tt)$/;"	f	struct:nn::Serial::forwardMain
apply	nn/Serial.h	/^		static void apply(const DeviceMatrix& x, thisType& tt)$/;"	f	struct:nn::Serial::updateMain
applyDiff	nn/Func1to1Exp.cuh	/^	static float applyDiff(float x)$/;"	f	class:nn::Func1to1Exp
applyDiff	nn/Func1to1Logistic.cuh	/^	static float applyDiff(float x)$/;"	f	class:nn::Func1to1Logistic
applyDiff	nn/Func1to1ReLU.cuh	/^	static float applyDiff(float x)$/;"	f	class:nn::Func1to1ReLU
applyDiff	nn/Func1to1Tanh.cuh	/^	static float applyDiff(float x)$/;"	f	class:nn::Func1to1Tanh
apply_kernel	nn/ElementWiseFunction1to1.cuh	/^	void apply_kernel$/;"	f	namespace:__anon2
apply_kernel	nn/ElementWiseFunction2to1.cuh	/^	void apply_kernel$/;"	f	namespace:__anon1
back	nn/Backpropagation_detail.h	/^void Backpropagation<AF, OutputLayer>::back(const DeviceMatrix& D)$/;"	f	class:nn::Backpropagation
back	nn/Backpropagation_detail.h	/^void Backpropagation<AF, OutputLayer>::back(const std::vector<float>& d)$/;"	f	class:nn::Backpropagation
back	nn/LayerInput.cuh	/^	const DeviceMatrix& back(const DeviceMatrix& weight_t_delta)$/;"	f	class:nn::LayerInput
back	nn/LayerNull.cuh	/^	const DeviceMatrix& back(const DeviceMatrix& weight_t_delta)$/;"	f	class:nn::LayerNull
back	nn/Layer_detail.h	/^const cuda::DeviceMatrix& Layer<ActivateMethod, UpdateMethod>::back(const DeviceMatrix& weight_t_delta)$/;"	f	class:nn::Layer
back	nn/Perceptron.cuh	/^	void back(const DeviceMatrix& d)$/;"	f	class:nn::Perceptron
back	nn/Serial.h	/^	const DeviceMatrix& back(const DeviceMatrix& weight_t_delta)$/;"	f	class:nn::Serial
backMain	nn/Serial.h	/^	struct backMain$/;"	s	class:nn::Serial
backMain	nn/Serial.h	/^	struct backMain<0, T>$/;"	s	class:nn::Serial
backpropagation	nn/AutoEncoder.cuh	/^	Backpropagation<AF, OutputLayerRegression> backpropagation;$/;"	m	class:nn::AutoEncoder	file:
bias	nn/Backpropagation.cuh	/^	std::vector<DeviceVector> bias;$/;"	m	class:nn::Backpropagation	file:
bias	nn/Layer.h	/^	DeviceVector bias;$/;"	m	class:nn::Layer
columnCount	cuda/DeviceMatrix.h	/^	unsigned int columnCount;$/;"	m	class:cuda::DeviceMatrix
compare	cuda/DeviceVectorUtils.cpp	/^float compare(const DeviceMatrix& m0, const DeviceMatrix& m1)$/;"	f	namespace:cuda
compare	cuda/DeviceVectorUtils.cpp	/^float compare(const DeviceVector& v0, const DeviceVector& v1)$/;"	f	namespace:cuda
compareVector	cuda/DeviceVectorUtils.cpp	/^float compareVector(const std::vector<float>& x0, const std::vector<float>& x1)$/;"	f	namespace:cuda
cuda	cuda/CuBlasException.h	/^namespace cuda$/;"	n
cuda	cuda/CuBlasFunction.cpp	/^namespace cuda$/;"	n	file:
cuda	cuda/CuBlasFunction.h	/^namespace cuda$/;"	n
cuda	cuda/CuBlasManager.cpp	/^namespace cuda$/;"	n	file:
cuda	cuda/CuBlasManager.h	/^namespace cuda$/;"	n
cuda	cuda/CuRandException.h	/^namespace cuda$/;"	n
cuda	cuda/CuRandFunction.cpp	/^namespace cuda$/;"	n	file:
cuda	cuda/CuRandFunction.h	/^namespace cuda$/;"	n
cuda	cuda/CuRandManager.cpp	/^namespace cuda$/;"	n	file:
cuda	cuda/CuRandManager.h	/^namespace cuda$/;"	n
cuda	cuda/CuSolverDnException.h	/^namespace cuda$/;"	n
cuda	cuda/CuSolverDnFunction.cpp	/^namespace cuda$/;"	n	file:
cuda	cuda/CuSolverDnFunction.h	/^namespace cuda$/;"	n
cuda	cuda/CuSolverDnManager.cpp	/^namespace cuda$/;"	n	file:
cuda	cuda/CuSolverDnManager.h	/^namespace cuda$/;"	n
cuda	cuda/CudaException.h	/^namespace cuda$/;"	n
cuda	cuda/CudaManager.h	/^namespace cuda$/;"	n
cuda	cuda/CudaStreamContainer.h	/^namespace cuda$/;"	n
cuda	cuda/DeviceMatrix.h	/^namespace cuda$/;"	n
cuda	cuda/DeviceVector.h	/^namespace cuda$/;"	n
cuda	cuda/DeviceVectorUtils.cpp	/^namespace cuda$/;"	n	file:
cuda	cuda/DeviceVectorUtils.h	/^namespace cuda$/;"	n
culculateBlockThreadCount	nn/ElementWiseFunction1to1.cuh	/^void ElementWiseFunction1to1<Func1to1>::culculateBlockThreadCount$/;"	f	class:nn::ElementWiseFunction1to1
culculateBlockThreadCount	nn/ElementWiseFunction2to1.cuh	/^void ElementWiseFunction2to1<Func2to1>::culculateBlockThreadCount$/;"	f	class:nn::ElementWiseFunction2to1
dbAccessor	FXAutoEncoder.cuh	/^	FXAutoEncoderDBAccessor dbAccessor;$/;"	m	class:FXAutoEncoder	file:
dbAccessorLearning	FXAutoEncoder.cuh	/^	DBAccessor dbAccessorLearning;$/;"	m	class:FXAutoEncoder	file:
dbFileName	FXAutoEncoder.cuh	/^	std::string dbFileName;$/;"	m	class:FXAutoEncoder	file:
dbFileName	FXAutoEncoderDBAccessor.cuh	/^	std::string dbFileName;$/;"	m	class:FXAutoEncoderDBAccessor	file:
delta	nn/Backpropagation.cuh	/^	std::vector<DeviceMatrix> delta;$/;"	m	class:nn::Backpropagation	file:
delta	nn/Layer.h	/^	DeviceMatrix delta;$/;"	m	class:nn::Layer
deltaBias	nn/Backpropagation.cuh	/^	std::vector<DeviceVector> deltaBias;$/;"	m	class:nn::Backpropagation	file:
deltaBias	nn/UpdateMethodMomentum.h	/^	DeviceVector deltaBias;$/;"	m	class:nn::UpdateMethodMomentum
deltaWeight	nn/Backpropagation.cuh	/^	std::vector<DeviceMatrix> deltaWeight;$/;"	m	class:nn::Backpropagation	file:
device	cuda/DeviceMatrix.h	/^	float* device;$/;"	m	class:cuda::DeviceMatrix
device	cuda/DeviceVector.h	/^	float* device;$/;"	m	class:cuda::DeviceVector
deviceProp	cuda/CudaManager.h	/^	cudaDeviceProp deviceProp;$/;"	m	class:cuda::CudaManager
diff	nn/ActivateMethodOutputIdentity.cuh	/^		using diff = ElementWiseFunction2to1<Func2to1ElementWiseDifference>;$/;"	u
dimension	cuda/DeviceVector.h	/^	unsigned int dimension;$/;"	m	class:cuda::DeviceVector
epsilon	nn/Backpropagation.cuh	/^	float epsilon;$/;"	m	class:nn::Backpropagation	file:
forward	nn/AutoEncoder.cuh	/^	DeviceMatrix forward(const DeviceMatrix& X)$/;"	f	class:nn::AutoEncoder
forward	nn/Backpropagation_detail.h	/^void Backpropagation<AF, OutputLayer>::forward(const DeviceMatrix& X, DeviceMatrix& Y)$/;"	f	class:nn::Backpropagation
forward	nn/Backpropagation_detail.h	/^void Backpropagation<AF, OutputLayer>::forward(const std::vector<float>& x, std::vector<float>& y)$/;"	f	class:nn::Backpropagation
forward	nn/LayerInput.cuh	/^	const DeviceMatrix& forward(const DeviceMatrix& x_)$/;"	f	class:nn::LayerInput
forward	nn/LayerNull.cuh	/^	const DeviceMatrix& forward(const DeviceMatrix& x)$/;"	f	class:nn::LayerNull
forward	nn/Layer_detail.h	/^const cuda::DeviceMatrix& Layer<ActivateMethod, UpdateMethod>::forward(const DeviceMatrix& x)$/;"	f	class:nn::Layer
forward	nn/Perceptron.cuh	/^	const DeviceMatrix& forward(const DeviceMatrix& x)$/;"	f	class:nn::Perceptron
forward	nn/Serial.h	/^	const DeviceMatrix& forward(const DeviceMatrix& x)$/;"	f	class:nn::Serial
forwardLinear	nn/Layer_detail.h	/^void Layer<ActivateMethod, UpdateMethod>::forwardLinear(const DeviceMatrix& x)$/;"	f	class:nn::Layer
forwardMain	nn/Serial.h	/^	struct forwardMain$/;"	s	class:nn::Serial
forwardMain	nn/Serial.h	/^	struct forwardMain<layerCount::value - 1, T>$/;"	s	class:nn::Serial
gamma	nn/Backpropagation.cuh	/^	float gamma;$/;"	m	class:nn::Backpropagation	file:
generator	cuda/CuRandManager.h	/^	curandGenerator_t generator;$/;"	m	class:cuda::CuRandManager
get	cuda/CudaStreamContainer.h	/^	cudaStream_t get(unsigned int stream_index)$/;"	f	class:cuda::CudaStreamContainer
get	cuda/DeviceMatrix.h	/^	std::vector<float> get() const$/;"	f	class:cuda::DeviceMatrix
get	cuda/DeviceMatrix.h	/^	void get(float* const host) const$/;"	f	class:cuda::DeviceMatrix
get	cuda/DeviceMatrix.h	/^	void get(std::vector<float>& host) const$/;"	f	class:cuda::DeviceMatrix
get	cuda/DeviceVector.h	/^	std::vector<float> get() const$/;"	f	class:cuda::DeviceVector
get	cuda/DeviceVector.h	/^	void get(float* const host) const$/;"	f	class:cuda::DeviceVector
get	cuda/DeviceVector.h	/^	void get(std::vector<float>& host) const$/;"	f	class:cuda::DeviceVector
get0Matrix	cuda/DeviceMatrix.h	/^	static DeviceMatrix get0Matrix(unsigned int row, unsigned int column)$/;"	f	class:cuda::DeviceMatrix
get0Vector	cuda/DeviceVector.h	/^	static DeviceVector get0Vector(unsigned int dimension)$/;"	f	class:cuda::DeviceVector
get1Matrix	cuda/DeviceMatrix.h	/^	static DeviceMatrix get1Matrix(unsigned int row, unsigned int column)$/;"	f	class:cuda::DeviceMatrix
get1Vector	cuda/DeviceVector.h	/^	static DeviceVector get1Vector(unsigned int dimension)$/;"	f	class:cuda::DeviceVector
getAddress	cuda/DeviceMatrix.h	/^	float* getAddress() const$/;"	f	class:cuda::DeviceMatrix
getAddress	cuda/DeviceVector.h	/^	float* getAddress() const$/;"	f	class:cuda::DeviceVector
getAllInput	FXAutoEncoder.cuh	/^	cuda::DeviceMatrix getAllInput()$/;"	f	class:FXAutoEncoder
getAlphaMatrix	cuda/DeviceMatrix.h	/^	static DeviceMatrix getAlphaMatrix(unsigned int row, unsigned int column, float alpha)$/;"	f	class:cuda::DeviceMatrix
getAlphaVector	cuda/DeviceVector.h	/^	static DeviceVector getAlphaVector(unsigned int dimension, float alpha)$/;"	f	class:cuda::DeviceVector
getAutoEncoder	FXAutoEncoder.cuh	/^	const AutoEncoderType& getAutoEncoder()$/;"	f	class:FXAutoEncoder
getBackpropagation	nn/AutoEncoder.cuh	/^	const Backpropagation<AF, OutputLayerRegression>& getBackpropagation() const$/;"	f	class:nn::AutoEncoder
getBias	nn/Backpropagation.cuh	/^	const std::vector<DeviceVector>& getBias() const$/;"	f	class:nn::Backpropagation
getBias	nn/Layer.h	/^	const DeviceVector& getBias() const$/;"	f	class:nn::Layer
getBiasAsVector	nn/Backpropagation.cuh	/^	std::vector<std::vector<float> > getBiasAsVector() const$/;"	f	class:nn::Backpropagation
getColumnCount	cuda/DeviceMatrix.h	/^	int getColumnCount() const$/;"	f	class:cuda::DeviceMatrix
getCount	cuda/CudaStreamContainer.h	/^	unsigned int getCount()$/;"	f	class:cuda::CudaStreamContainer
getDEDBAsVector	nn/Backpropagation.cuh	/^	std::vector<std::vector<float> > getDEDBAsVector() const$/;"	f	class:nn::Backpropagation
getDelta	nn/ActivateMethodElementWise.cuh	/^	static void getDelta$/;"	f	class:nn::ActivateMethodElementWise
getDelta	nn/ActivateMethodOutputIdentity.cuh	/^	static void getDelta$/;"	f	class:nn::ActivateMethodOutputIdentity
getDelta	nn/Backpropagation.cuh	/^	const std::vector<DeviceMatrix>& getDelta() const$/;"	f	class:nn::Backpropagation
getDelta	nn/Layer.h	/^	const DeviceMatrix& getDelta() const$/;"	f	class:nn::Layer
getDeltaAsVector	nn/Backpropagation.cuh	/^	std::vector<std::vector<float> > getDeltaAsVector() const$/;"	f	class:nn::Backpropagation
getDeltaBias	nn/UpdateMethodMomentum.h	/^	const DeviceVector& getDeltaBias() const$/;"	f	class:nn::UpdateMethodMomentum
getDeltaWeight	nn/UpdateMethodMomentum.h	/^	const DeviceMatrix& getDeltaWeight() const$/;"	f	class:nn::UpdateMethodMomentum
getDeviceProp	cuda/CudaManager.h	/^	static inline const cudaDeviceProp& getDeviceProp(void)$/;"	f	class:cuda::CudaManager
getDimension	cuda/DeviceVector.h	/^	unsigned int getDimension() const$/;"	f	class:cuda::DeviceVector
getEpsilon	nn/AutoEncoder.cuh	/^	float getEpsilon() const$/;"	f	class:nn::AutoEncoder
getEpsilon	nn/Backpropagation.cuh	/^	float getEpsilon() const$/;"	f	class:nn::Backpropagation
getErrorString	cuda/CuBlasManager.cpp	/^const char* CuBlasManager::getErrorString(cublasStatus_t error)$/;"	f	class:cuda::CuBlasManager
getErrorString	cuda/CuRandManager.cpp	/^const char* CuRandManager::getErrorString(curandStatus_t error)$/;"	f	class:cuda::CuRandManager
getErrorString	cuda/CuSolverDnManager.cpp	/^const char* CuSolverDnManager::getErrorString(cusolverStatus_t status)$/;"	f	class:cuda::CuSolverDnManager
getGamma	nn/AutoEncoder.cuh	/^	float getGamma() const$/;"	f	class:nn::AutoEncoder
getGamma	nn/Backpropagation.cuh	/^	float getGamma() const$/;"	f	class:nn::Backpropagation
getGenerator	cuda/CuRandManager.h	/^	static curandGenerator_t getGenerator()$/;"	f	class:cuda::CuRandManager
getHandle	cuda/CuBlasManager.h	/^	static cublasHandle_t getHandle()$/;"	f	class:cuda::CuBlasManager
getHandle	cuda/CuSolverDnManager.h	/^	static inline cusolverDnHandle_t getHandle(void)$/;"	f	class:cuda::CuSolverDnManager
getInput	nn/Perceptron.cuh	/^	Input& getInput(void)$/;"	f	class:nn::Perceptron
getInstance	cuda/CuBlasManager.h	/^	static CuBlasManager& getInstance()$/;"	f	class:cuda::CuBlasManager
getInstance	cuda/CuRandManager.h	/^	static CuRandManager& getInstance()$/;"	f	class:cuda::CuRandManager
getInstance	cuda/CuSolverDnManager.h	/^	static inline CuSolverDnManager& getInstance()$/;"	f	class:cuda::CuSolverDnManager
getInstance	cuda/CudaManager.h	/^	static CudaManager& getInstance()$/;"	f	class:cuda::CudaManager
getInternal	nn/Perceptron.cuh	/^	Internal& getInternal(void)$/;"	f	class:nn::Perceptron
getInversePCAWhitening	nn/Normalization.h	/^	DeviceMatrix getInversePCAWhitening(const DeviceMatrix& X, const DeviceVector& _1B) const$/;"	f	class:nn::Normalization
getInversePCAWhiteningMatrix	nn/Normalization.h	/^	const DeviceMatrix& getInversePCAWhiteningMatrix(void) const$/;"	f	class:nn::Normalization
getInverseWhitening	nn/Normalization.cpp	/^DeviceMatrix Normalization::getInverseWhitening$/;"	f	class:nn::Normalization
getInverseWhiteningMatrix	nn/AutoEncoder.cuh	/^	DeviceMatrix getInverseWhiteningMatrix() const$/;"	f	class:nn::AutoEncoder
getInverseZCAWhitening	nn/Normalization.h	/^	DeviceMatrix getInverseZCAWhitening(const DeviceMatrix& X, const DeviceVector& _1B) const$/;"	f	class:nn::Normalization
getInverseZCAWhiteningMatrix	nn/Normalization.h	/^	const DeviceMatrix& getInverseZCAWhiteningMatrix(void) const$/;"	f	class:nn::Normalization
getLayerCount	nn/Backpropagation.cuh	/^	unsigned int getLayerCount() const$/;"	f	class:nn::Backpropagation
getLearningRate	nn/UpdateMethodMomentum.h	/^	float getLearningRate() const$/;"	f	class:nn::UpdateMethodMomentum
getMainStream	nn/Backpropagation.cuh	/^	cudaStream_t getMainStream(void) const$/;"	f	class:nn::Backpropagation
getMean	autoEncoder.cpp	/^void getMean(const std::vector<track>& v, track& mean)$/;"	f
getMean	nn/Normalization.h	/^	const DeviceVector& getMean(void) const$/;"	f	class:nn::Normalization
getMeanAndVarCovMatrix	nn/Statistics.cpp	/^void getMeanAndVarCovMatrix(const DeviceMatrix& sample, DeviceVector& mean, DeviceMatrix& varCovMatrix, cudaStream_t stream)$/;"	f	namespace:nn
getMember	nn/Serial.h	/^	const layerType<N>& getMember() const$/;"	f	class:nn::Serial
getMember	nn/Serial.h	/^	layerType<N>& getMember()$/;"	f	class:nn::Serial
getMiniBatchSize	nn/Backpropagation.cuh	/^	unsigned int getMiniBatchSize() const$/;"	f	class:nn::Backpropagation
getMiniBatchSize	nn/Layer.h	/^	unsigned int getMiniBatchSize() const$/;"	f	class:nn::Layer
getMomentum	nn/UpdateMethodMomentum.h	/^	float getMomentum() const$/;"	f	class:nn::UpdateMethodMomentum
getNormarization	nn/AutoEncoder.cuh	/^	const Normalization& getNormarization() const$/;"	f	class:nn::AutoEncoder
getOutput	nn/Perceptron.cuh	/^	Output& getOutput(void)$/;"	f	class:nn::Perceptron
getPCAWhitening	nn/Normalization.h	/^	DeviceMatrix getPCAWhitening(const DeviceMatrix& X, const DeviceVector& _1B) const$/;"	f	class:nn::Normalization
getPCAWhiteningMatrix	nn/Normalization.h	/^	const DeviceMatrix& getPCAWhiteningMatrix(void) const$/;"	f	class:nn::Normalization
getParameterVector	nn/BackpropagationUtils_detail.cuh	/^std::vector<float> getParameterVector(const nn::Backpropagation<AF, OutputLayer>& backpropagation)$/;"	f	namespace:nn
getRowCount	cuda/DeviceMatrix.h	/^	int getRowCount() const$/;"	f	class:cuda::DeviceMatrix
getStream	cuda/CudaManager.h	/^	cudaStream_t getStream(unsigned int stream_index)$/;"	f	class:cuda::CudaManager
getStreamCount	cuda/CudaManager.h	/^	unsigned int getStreamCount()$/;"	f	class:cuda::CudaManager
getSubStream	nn/Backpropagation.cuh	/^	cudaStream_t getSubStream(unsigned int stream_index) const$/;"	f	class:nn::Backpropagation
getSubStreamCount	nn/Backpropagation.cuh	/^	unsigned int getSubStreamCount(void) const$/;"	f	class:nn::Backpropagation
getU	nn/Backpropagation.cuh	/^	const std::vector<DeviceMatrix>& getU() const$/;"	f	class:nn::Backpropagation
getU	nn/Backpropagation.cuh	/^	void getU(std::vector<std::vector<float> >& hu) const$/;"	f	class:nn::Backpropagation
getU	nn/Layer.h	/^	const DeviceMatrix& getU() const$/;"	f	class:nn::Layer
getUAsVector	nn/Backpropagation.cuh	/^	std::vector<std::vector<float> > getUAsVector() const$/;"	f	class:nn::Backpropagation
getUpdateMethod	nn/Layer.h	/^	const UpdateMethod& getUpdateMethod() const$/;"	f	class:nn::Layer
getVarCovEigenValue	nn/Normalization.h	/^	const DeviceVector& getVarCovEigenValue(void) const$/;"	f	class:nn::Normalization
getVarCovEigenVector	nn/Normalization.h	/^	const DeviceMatrix& getVarCovEigenVector(void) const$/;"	f	class:nn::Normalization
getVarCovMatrix	nn/Normalization.h	/^	const DeviceMatrix& getVarCovMatrix(void) const$/;"	f	class:nn::Normalization
getWTDelta	nn/Backpropagation.cuh	/^	const std::vector<DeviceMatrix>& getWTDelta() const$/;"	f	class:nn::Backpropagation
getWeight	nn/Backpropagation.cuh	/^	const std::vector<DeviceMatrix>& getWeight() const$/;"	f	class:nn::Backpropagation
getWeight	nn/Layer.h	/^	const DeviceMatrix& getWeight() const$/;"	f	class:nn::Layer
getWeightAsVector	nn/Backpropagation.cuh	/^	std::vector<std::vector<float> > getWeightAsVector() const$/;"	f	class:nn::Backpropagation
getWeightTDelta	nn/Layer.h	/^	const DeviceMatrix& getWeightTDelta() const$/;"	f	class:nn::Layer
getWeightTDelta	nn/Layer_detail.h	/^void Layer<ActivateMethod, UpdateMethod>::getWeightTDelta()$/;"	f	class:nn::Layer
getWhitening	nn/Normalization.cpp	/^DeviceMatrix Normalization::getWhitening$/;"	f	class:nn::Normalization
getWhiteningMatrix	nn/AutoEncoder.cuh	/^	DeviceMatrix getWhiteningMatrix() const$/;"	f	class:nn::AutoEncoder
getZ	nn/Backpropagation.cuh	/^	const std::vector<DeviceMatrix>& getZ() const$/;"	f	class:nn::Backpropagation
getZ	nn/Layer.h	/^	const DeviceMatrix& getZ() const$/;"	f	class:nn::Layer
getZ	nn/LayerInput.cuh	/^	const DeviceMatrix& getZ() const$/;"	f	class:nn::LayerInput
getZ	nn/LayerNull.cuh	/^	const DeviceMatrix& getZ() const$/;"	f	class:nn::LayerNull
getZ	nn/Serial.h	/^	const DeviceMatrix& getZ() const$/;"	f	class:nn::Serial
getZAsVector	nn/Backpropagation.cuh	/^	std::vector<std::vector<float> > getZAsVector() const$/;"	f	class:nn::Backpropagation
getZCAWhitening	nn/Normalization.h	/^	DeviceMatrix getZCAWhitening(const DeviceMatrix& X, const DeviceVector& _1B) const$/;"	f	class:nn::Normalization
getZCAWhiteningMatrix	nn/Normalization.h	/^	const DeviceMatrix& getZCAWhiteningMatrix(void) const$/;"	f	class:nn::Normalization
handle	cuda/CuBlasManager.h	/^	cublasHandle_t handle;$/;"	m	class:cuda::CuBlasManager
handle	cuda/CuSolverDnManager.h	/^	cusolverDnHandle_t handle;$/;"	m	class:cuda::CuSolverDnManager
init	cuda/CudaStreamContainer.h	/^	void init(unsigned int stream_count)$/;"	f	class:cuda::CudaStreamContainer
init	nn/AutoEncoder.cuh	/^	void init(const DeviceMatrix& normarize_input, unsigned int layer_size, unsigned int minibatch_size)$/;"	f	class:nn::AutoEncoder
init	nn/Backpropagation_detail.h	/^void Backpropagation<AF, OutputLayer>::init(const std::vector<unsigned int>& unit_count, unsigned int minibatch_size)$/;"	f	class:nn::Backpropagation
init	nn/LayerInput.cuh	/^	void init(unsigned int dim_input, unsigned int minibatch_size = 1)$/;"	f	class:nn::LayerInput
init	nn/LayerNull.cuh	/^	void init()$/;"	f	class:nn::LayerNull
init	nn/Layer_detail.h	/^void Layer<ActivateMethod, UpdateMethod>::init$/;"	f	class:nn::Layer
init	nn/Normalization.cpp	/^void Normalization::init(const DeviceMatrix& X)$/;"	f	class:nn::Normalization
init	nn/UpdateMethodMomentum.cpp	/^void UpdateMethodMomentum::init(unsigned int dim_input, unsigned int dim_output, unsigned int minibatch_size)$/;"	f	class:nn::UpdateMethodMomentum
initRandom	nn/Backpropagation_detail.h	/^void Backpropagation<AF, OutputLayer>::initRandom(void)$/;"	f	class:nn::Backpropagation
initStream	cuda/CudaManager.h	/^	void initStream(unsigned int stream_count)$/;"	f	class:cuda::CudaManager
initWeightBias	nn/Layer_detail.h	/^void Layer<ActivateMethod, UpdateMethod>::initWeightBias(void)$/;"	f	class:nn::Layer
internal	nn/Perceptron.cuh	/^	Internal internal;$/;"	m	class:nn::Perceptron	file:
inversePCAWhiteningMatrix	nn/Normalization.h	/^	DeviceMatrix inversePCAWhiteningMatrix;$/;"	m	class:nn::Normalization
inverseZCAWhiteningMatrix	nn/Normalization.h	/^	DeviceMatrix inverseZCAWhiteningMatrix;$/;"	m	class:nn::Normalization
latitude	TrackData.h	/^	float latitude;$/;"	m	class:TrackData
layerCount	nn/AutoEncoder.cuh	/^	const unsigned int layerCount;$/;"	m	class:nn::AutoEncoder	file:
layerCount	nn/Backpropagation.cuh	/^	const unsigned int layerCount;$/;"	m	class:nn::Backpropagation	file:
layerCount	nn/Serial.h	/^	using layerCount = std::tuple_size<layerTupleType>;$/;"	u
layerTupleType	nn/Serial.h	/^	using layerTupleType = std::tuple<Layer, LayerRemain...>;$/;"	u
layerType	nn/Serial.h	/^	using layerType = typename std::tuple_element<N, layerTupleType>::type;$/;"	u
learning	nn/AutoEncoder.cuh	/^	DeviceMatrix learning(const DeviceMatrix& X)$/;"	f	class:nn::AutoEncoder
learningQueryCache	FXAutoEncoder.cuh	/^	std::vector<float> learningQueryCache;$/;"	m	class:FXAutoEncoder	file:
learningRate	nn/UpdateMethodMomentum.h	/^	float learningRate;$/;"	m	class:nn::UpdateMethodMomentum
longitude	TrackData.h	/^	float longitude;$/;"	m	class:TrackData
main	autoEncoder.cpp	/^int main(void)$/;"	f
miniBatchSize	nn/Backpropagation.cuh	/^	unsigned int miniBatchSize;$/;"	m	class:nn::Backpropagation	file:
miniBatchSize	nn/Layer.h	/^	unsigned int miniBatchSize;$/;"	m	class:nn::Layer
momentum	nn/UpdateMethodMomentum.h	/^	float momentum;$/;"	m	class:nn::UpdateMethodMomentum
nn	nn/ActivateFunction.cuh	/^namespace nn$/;"	n	file:
nn	nn/ActivateMethodElementWise.cuh	/^namespace nn$/;"	n	file:
nn	nn/ActivateMethodOutputIdentity.cuh	/^namespace nn$/;"	n	file:
nn	nn/AutoEncoder.cuh	/^namespace nn$/;"	n	file:
nn	nn/AutoEncoderTanh.cuh	/^namespace nn$/;"	n	file:
nn	nn/Backpropagation.cuh	/^namespace nn$/;"	n	file:
nn	nn/BackpropagationException.h	/^namespace nn$/;"	n
nn	nn/BackpropagationTanhReg.cuh	/^namespace nn$/;"	n	file:
nn	nn/BackpropagationUtils.cuh	/^namespace nn$/;"	n	file:
nn	nn/BackpropagationUtils_detail.cuh	/^namespace nn$/;"	n	file:
nn	nn/Backpropagation_detail.h	/^namespace nn$/;"	n
nn	nn/ElementWiseFunction1to1.cuh	/^namespace nn$/;"	n	file:
nn	nn/ElementWiseFunction2to1.cuh	/^namespace nn$/;"	n	file:
nn	nn/ElementWiseFunctionUtil.cuh	/^namespace nn$/;"	n	file:
nn	nn/Func1to1Exp.cuh	/^namespace nn$/;"	n	file:
nn	nn/Func1to1Logistic.cuh	/^namespace nn$/;"	n	file:
nn	nn/Func1to1ReLU.cuh	/^namespace nn$/;"	n	file:
nn	nn/Func1to1Tanh.cuh	/^namespace nn$/;"	n	file:
nn	nn/Func2to1ElementWiseDifference.cuh	/^namespace nn$/;"	n	file:
nn	nn/Func2to1ElementWiseProduct.cuh	/^namespace nn$/;"	n	file:
nn	nn/Func2to1ElementWiseSum.cuh	/^namespace nn$/;"	n	file:
nn	nn/Layer.h	/^namespace nn$/;"	n
nn	nn/LayerInput.cuh	/^namespace nn$/;"	n	file:
nn	nn/LayerInternal.cuh	/^namespace nn$/;"	n	file:
nn	nn/LayerNull.cuh	/^namespace nn$/;"	n	file:
nn	nn/LayerOutputIdentity.cuh	/^namespace nn$/;"	n	file:
nn	nn/Layer_detail.h	/^namespace nn$/;"	n
nn	nn/Normalization.cpp	/^namespace nn$/;"	n	file:
nn	nn/Normalization.h	/^namespace nn$/;"	n
nn	nn/OutputLayerMulticlassClassification.cuh	/^namespace nn$/;"	n	file:
nn	nn/OutputLayerRegression.cuh	/^namespace nn$/;"	n	file:
nn	nn/Perceptron.cuh	/^namespace nn$/;"	n	file:
nn	nn/Serial.h	/^namespace nn$/;"	n
nn	nn/Statistics.cpp	/^namespace nn$/;"	n	file:
nn	nn/Statistics.h	/^namespace nn$/;"	n
nn	nn/UpdateMethodMomentum.cpp	/^namespace nn$/;"	n	file:
nn	nn/UpdateMethodMomentum.h	/^namespace nn$/;"	n
normalization	nn/AutoEncoder.cuh	/^	Normalization normalization;$/;"	m	class:nn::AutoEncoder	file:
obtainDelta	nn/Backpropagation_detail.h	/^void Backpropagation<AF, OutputLayer>::obtainDelta(unsigned int l)$/;"	f	class:nn::Backpropagation
obtainDeltaFromFdUWTDelta	nn/Backpropagation_detail.h	/^void Backpropagation<AF, OutputLayer>::obtainDeltaFromFdUWTDelta(unsigned int l)$/;"	f	class:nn::Backpropagation
obtainDeltaLast	nn/Backpropagation_detail.h	/^void Backpropagation<AF, OutputLayer>::obtainDeltaLast(const DeviceMatrix& D)$/;"	f	class:nn::Backpropagation
obtainUFromZ	nn/Backpropagation.cuh	/^	void obtainUFromZ(unsigned int l)$/;"	f	class:nn::Backpropagation
obtainZFromU	nn/Backpropagation_detail.h	/^void Backpropagation<AF, OutputLayer>::obtainZFromU(unsigned int l)$/;"	f	class:nn::Backpropagation
operator =	cuda/DeviceMatrix.h	/^	DeviceMatrix& operator=(DeviceMatrix&& dm)$/;"	f	class:cuda::DeviceMatrix
operator =	cuda/DeviceMatrix.h	/^	DeviceMatrix& operator=(const DeviceMatrix& dm)$/;"	f	class:cuda::DeviceMatrix
operator =	cuda/DeviceVector.h	/^	DeviceVector& operator=(DeviceVector&& dv)$/;"	f	class:cuda::DeviceVector
operator =	cuda/DeviceVector.h	/^	DeviceVector& operator=(const DeviceVector& dv)$/;"	f	class:cuda::DeviceVector
output	nn/Perceptron.cuh	/^	Output output;$/;"	m	class:nn::Perceptron	file:
pcaWhiteningMatrix	nn/Normalization.h	/^	DeviceMatrix pcaWhiteningMatrix;$/;"	m	class:nn::Normalization
readFromCsvFile	cuda/DeviceVectorUtils.cpp	/^DeviceMatrix& readFromCsvFile(const std::string& csvFileName, DeviceMatrix& deviceMatrix)$/;"	f	namespace:cuda
readFromCsvFile	cuda/DeviceVectorUtils.cpp	/^DeviceVector& readFromCsvFile(const std::string& csvFileName, DeviceVector& deviceVector)$/;"	f	namespace:cuda
rowCount	cuda/DeviceMatrix.h	/^	unsigned int rowCount;$/;"	m	class:cuda::DeviceMatrix
set	cuda/DeviceMatrix.h	/^	void set(const float* host)$/;"	f	class:cuda::DeviceMatrix
set	cuda/DeviceMatrix.h	/^	void set(const std::vector<float>& host)$/;"	f	class:cuda::DeviceMatrix
set	cuda/DeviceVector.h	/^	void set(const float* const host)$/;"	f	class:cuda::DeviceVector
set	cuda/DeviceVector.h	/^	void set(const std::vector<float>& host)$/;"	f	class:cuda::DeviceVector
setBias	nn/Backpropagation.cuh	/^	void setBias(const std::vector<std::vector<float> >& b)$/;"	f	class:nn::Backpropagation
setBias	nn/Layer.h	/^	void setBias(const DeviceVector& b)$/;"	f	class:nn::Layer
setDbFileName	FXAutoEncoderDBAccessor.cuh	/^	void setDbFileName(const std::string& db_file_name)$/;"	f	class:FXAutoEncoderDBAccessor
setEpsilon	nn/AutoEncoder.cuh	/^	void setEpsilon(float e)$/;"	f	class:nn::AutoEncoder
setEpsilon	nn/Backpropagation.cuh	/^	void setEpsilon(float e)$/;"	f	class:nn::Backpropagation
setGamma	nn/AutoEncoder.cuh	/^	void setGamma(float g)$/;"	f	class:nn::AutoEncoder
setGamma	nn/Backpropagation.cuh	/^	void setGamma(float g)$/;"	f	class:nn::Backpropagation
setLearningRate	nn/UpdateMethodMomentum.h	/^	void setLearningRate(float learning_rate)$/;"	f	class:nn::UpdateMethodMomentum
setMomentum	nn/UpdateMethodMomentum.h	/^	void setMomentum(float momentum_)$/;"	f	class:nn::UpdateMethodMomentum
setRandomUniform	cuda/CuRandFunction.cpp	/^void setRandomUniform(float min, float max, DeviceMatrix& m)$/;"	f	namespace:cuda
setRandomUniform	cuda/CuRandFunction.cpp	/^void setRandomUniform(float min, float max, DeviceVector& v)$/;"	f	namespace:cuda
setSubStreamCount	nn/Backpropagation.cuh	/^	void setSubStreamCount(unsigned int substream_count) const$/;"	f	class:nn::Backpropagation
setWeight	nn/Backpropagation.cuh	/^	void setWeight(const std::vector<std::vector<float> >& w)$/;"	f	class:nn::Backpropagation
setWeight	nn/Layer.h	/^	void setWeight(const DeviceMatrix& w)$/;"	f	class:nn::Layer
stream	cuda/CudaManager.h	/^	std::vector<cudaStream_t> stream;$/;"	m	class:cuda::CudaManager
stream	cuda/CudaStreamContainer.h	/^	std::vector<cudaStream_t> stream;$/;"	m	class:cuda::CudaStreamContainer
stringToEpoch	util/TimeUtil.cpp	/^time_t TimeUtil::stringToEpoch(const std::string& timestr_jst)$/;"	f	class:TimeUtil
testCUBLAS	autoEncoder.cpp	/^int testCUBLAS()$/;"	f
testCUBLASClass	autoEncoder.cpp	/^int testCUBLASClass()$/;"	f
testDBAccessor	autoEncoder.cpp	/^int testDBAccessor(void)$/;"	f
testDeviceVector	autoEncoder.cpp	/^int testDeviceVector(void)$/;"	f
testTimeBegin	FXAutoEncoder.cuh	/^	time_t testTimeBegin;$/;"	m	class:FXAutoEncoder	file:
testTimeEnd	FXAutoEncoder.cuh	/^	time_t testTimeEnd;$/;"	m	class:FXAutoEncoder	file:
thisType	nn/Serial.h	/^	using thisType = Serial<Layer, LayerRemain...>;$/;"	u
time	TrackData.h	/^	float time;$/;"	m	class:TrackData
timeLength	FXAutoEncoder.cuh	/^	unsigned int timeLength;$/;"	m	class:FXAutoEncoder	file:
track	autoEncoder.cpp	/^using track = std::array<float, 4>;$/;"	u
trainingTimeBegin	FXAutoEncoder.cuh	/^	time_t trainingTimeBegin;$/;"	m	class:FXAutoEncoder	file:
trainingTimeEnd	FXAutoEncoder.cuh	/^	time_t trainingTimeEnd;$/;"	m	class:FXAutoEncoder	file:
u	nn/Backpropagation.cuh	/^	std::vector<DeviceMatrix> u;$/;"	m	class:nn::Backpropagation	file:
u	nn/Layer.h	/^	DeviceMatrix u;$/;"	m	class:nn::Layer
unitCount	nn/Backpropagation.cuh	/^	std::vector<unsigned int> unitCount;$/;"	m	class:nn::Backpropagation	file:
update	nn/LayerInput.cuh	/^	void update(const DeviceMatrix& x)$/;"	f	class:nn::LayerInput
update	nn/LayerNull.cuh	/^	void update(const DeviceMatrix& x)$/;"	f	class:nn::LayerNull
update	nn/Layer_detail.h	/^void Layer<ActivateMethod, UpdateMethod>::update(const DeviceMatrix& x)$/;"	f	class:nn::Layer
update	nn/Perceptron.cuh	/^	void update(void)$/;"	f	class:nn::Perceptron
update	nn/Serial.h	/^	void update(const DeviceMatrix& x)$/;"	f	class:nn::Serial
update	nn/UpdateMethodMomentum.cpp	/^void UpdateMethodMomentum::update(const DeviceMatrix& x, const DeviceMatrix& delta, DeviceMatrix& weight, DeviceVector& bias)$/;"	f	class:nn::UpdateMethodMomentum
updateMain	nn/Serial.h	/^	struct updateMain$/;"	s	class:nn::Serial
updateMain	nn/Serial.h	/^	struct updateMain<layerCount::value - 1, T>$/;"	s	class:nn::Serial
updateMethod	nn/Layer.h	/^	UpdateMethod updateMethod;$/;"	m	class:nn::Layer
updateParameter	nn/Backpropagation_detail.h	/^void Backpropagation<AF, OutputLayer>::updateParameter()$/;"	f	class:nn::Backpropagation
varCovEigenValue	nn/Normalization.h	/^	DeviceVector varCovEigenValue;$/;"	m	class:nn::Normalization
varCovEigenVector	nn/Normalization.h	/^	DeviceMatrix varCovEigenVector;$/;"	m	class:nn::Normalization
varCovMatrix	nn/Normalization.h	/^	DeviceMatrix varCovMatrix;$/;"	m	class:nn::Normalization
weight	nn/Backpropagation.cuh	/^	std::vector<DeviceMatrix> weight;$/;"	m	class:nn::Backpropagation	file:
weight	nn/Layer.h	/^	DeviceMatrix weight;$/;"	m	class:nn::Layer
weightTDelta	nn/Layer.h	/^	DeviceMatrix weightTDelta;$/;"	m	class:nn::Layer
writeBiasSetting	nn/BackpropagationUtils_detail.cuh	/^	void writeBiasSetting(std::ostream& out, unsigned int layer_index, const std::string& node_name)$/;"	f	namespace:__anon3
writeEdgeSettings	nn/BackpropagationUtils_detail.cuh	/^	void writeEdgeSettings$/;"	f	namespace:__anon3
writeNodeSettings	nn/BackpropagationUtils_detail.cuh	/^	void writeNodeSettings(std::ostream& out, const std::vector<cuda::DeviceMatrix>& weight)$/;"	f	namespace:__anon3
writeRankSettings	nn/BackpropagationUtils_detail.cuh	/^	void writeRankSettings(std::ostream& out, const std::vector<cuda::DeviceMatrix>& weight)$/;"	f	namespace:__anon3
writeSingleNodeSetting	nn/BackpropagationUtils_detail.cuh	/^	void writeSingleNodeSetting(std::ostream& out, unsigned int layer_index, unsigned int dimension, const std::string& node_name)$/;"	f	namespace:__anon3
writeToCsvFile	cuda/DeviceVectorUtils.cpp	/^void writeToCsvFile(const std::string& csvFileName, const DeviceMatrix& deviceMatrix)$/;"	f	namespace:cuda
writeToCsvFile	cuda/DeviceVectorUtils.cpp	/^void writeToCsvFile(const std::string& csvFileName, const DeviceVector& deviceVector)$/;"	f	namespace:cuda
writeToDotFile	nn/BackpropagationUtils_detail.cuh	/^void writeToDotFile(const std::string& dotfilename, const nn::Backpropagation<AF, OutputLayer>& backpropagation)$/;"	f	namespace:nn
z	nn/Backpropagation.cuh	/^	std::vector<DeviceMatrix> z;$/;"	m	class:nn::Backpropagation	file:
z	nn/Layer.h	/^	DeviceMatrix z;$/;"	m	class:nn::Layer
zcaWhiteningMatrix	nn/Normalization.h	/^	DeviceMatrix zcaWhiteningMatrix;$/;"	m	class:nn::Normalization
~CuBlasManager	cuda/CuBlasManager.h	/^	virtual ~CuBlasManager()$/;"	f	class:cuda::CuBlasManager
~CuRandManager	cuda/CuRandManager.h	/^	~CuRandManager()$/;"	f	class:cuda::CuRandManager
~CuSolverDnManager	cuda/CuSolverDnManager.h	/^	~CuSolverDnManager()$/;"	f	class:cuda::CuSolverDnManager
~CudaManager	cuda/CudaManager.h	/^	~CudaManager()$/;"	f	class:cuda::CudaManager
~DeviceMatrix	cuda/DeviceMatrix.h	/^	~DeviceMatrix()$/;"	f	class:cuda::DeviceMatrix
~DeviceVector	cuda/DeviceVector.h	/^	~DeviceVector()$/;"	f	class:cuda::DeviceVector
