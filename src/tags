!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Backpropagation	Backpropagation.h	/^	Backpropagation(unsigned int layer_count):$/;"	f	class:Backpropagation
Backpropagation	Backpropagation.h	/^class Backpropagation$/;"	c
COMMON_FLAGS	makefile	/^COMMON_FLAGS := -pg -g -O0$/;"	m
CUBLASManager	CUBLASManager.h	/^	CUBLASManager():$/;"	f	class:CUBLASManager
CUBLASManager	CUBLASManager.h	/^class CUBLASManager$/;"	c
CUDA_SRCS	makefile	/^CUDA_SRCS := $(shell ls *.cu)$/;"	m
CXXFLAGS	makefile	/^CXXFLAGS := -Wall -fopenmp -I\/usr\/include -I\/usr\/local\/cuda\/include -I$(HOME)\/programs\/ATFViewer\/include $(CXX_LINKS)$/;"	m
CXXONLYFLAGS	makefile	/^CXXONLYFLAGS := -std=c++11 -Weffc++$/;"	m
CXX_LINKS	makefile	/^CXX_LINKS := -L\/usr\/local\/lib -lgtest -lsqlite3 -lcublas $/;"	m
DEPS	makefile	/^DEPS := $(SRCS:.cpp=.d) $(CUDA_SRCS:.cu=.d)$/;"	m
DeviceMatrix	DeviceMatrix.h	/^	DeviceMatrix():$/;"	f	class:DeviceMatrix
DeviceMatrix	DeviceMatrix.h	/^	DeviceMatrix(int r, int c):$/;"	f	class:DeviceMatrix
DeviceMatrix	DeviceMatrix.h	/^	DeviceMatrix(int r, int c, const std::vector<float>& d):$/;"	f	class:DeviceMatrix
DeviceMatrix	DeviceMatrix.h	/^class DeviceMatrix$/;"	c
DeviceMatrixTest	unittest.cpp	/^class DeviceMatrixTest : public ::testing::Test , public ::testing::WithParamInterface<RowColumn>$/;"	c	file:
DeviceVector	DeviceVector.h	/^	DeviceVector(DeviceVector&& dv):$/;"	f	class:DeviceVector
DeviceVector	DeviceVector.h	/^	DeviceVector(const DeviceVector& dv):$/;"	f	class:DeviceVector
DeviceVector	DeviceVector.h	/^	DeviceVector(const std::initializer_list<float> v):$/;"	f	class:DeviceVector
DeviceVector	DeviceVector.h	/^	DeviceVector(const std::vector<float>& v):$/;"	f	class:DeviceVector
DeviceVector	DeviceVector.h	/^	DeviceVector(unsigned int d = 0):$/;"	f	class:DeviceVector
DeviceVector	DeviceVector.h	/^class DeviceVector$/;"	c
DeviceVectorTest	unittest.cpp	/^class DeviceVectorTest : public ::testing::Test , public ::testing::WithParamInterface<unsigned int>$/;"	c	file:
GPROF2DOT	makefile	/^GPROF2DOT := ~\/tools\/gprof2dot\/gprof2dot.py$/;"	m
GTEST_LANG_CXX11	unittest.cpp	19;"	d	file:
HOME	makefile	/^HOME := $(shell echo ~)$/;"	m
MAKETEST_EXIST	makefile	/^MAKETEST_EXIST = glunittest$/;"	m
MAKETEST_NOTEXIST	makefile	/^MAKETEST_NOTEXIST = notexistfile$/;"	m
NVCC	makefile	/^NVCC := nvcc$/;"	m
NVCC_CXX_FLAGS	makefile	/^NVCC_CXX_FLAGS := $(CXXFLAGS:%=-Xcompiler %)$/;"	m
NVCC_FLAGS	makefile	/^NVCC_FLAGS := --std c++11 -G -Wno-deprecated-gpu-targets$/;"	m
NVCC_LINKS	makefile	/^NVCC_LINKS := -lcuda -lcudart $(CXX_LINKS)$/;"	m
NVPROF	makefile	/^NVPROF := nvprof --csv$/;"	m
NVPROFGRAPH	makefile	/^NVPROFGRAPH := ~\/tools\/nvprof_graph\/nvprof_graph.sh$/;"	m
OBJS	makefile	/^OBJS := $(SRCS:.cpp=.o) $(CUDA_SRCS:.cu=.o)$/;"	m
OBJSTARGET	makefile	/^OBJSTARGET := $(filter-out $(TESTTARGET).o $(GLTESTTARGET).o, $(OBJS))$/;"	m
OBJSTEST	makefile	/^OBJSTEST := $(filter-out $(TARGET).o $(GLTESTTARGET).o, $(OBJS))$/;"	m
RowColumn	unittest.cpp	/^using RowColumn = std::tuple<unsigned int, unsigned int>;$/;"	u
SRCS	makefile	/^SRCS := $(shell ls *.cpp)$/;"	m
SetUp	unittest.cpp	/^	void SetUp(){}$/;"	f	class:DeviceMatrixTest
SetUp	unittest.cpp	/^	void SetUp(){}$/;"	f	class:DeviceVectorTest
Sgeam	CUBLASFunction.cpp	/^void Sgeam$/;"	f
Sgemv	CUBLASFunction.cpp	/^void Sgemv$/;"	f
TARGET	makefile	/^TARGET := $(shell basename `dirname \\`pwd\\``)$/;"	m
TEST	unittest.cpp	/^TEST(DeviceMatrixTest, DefaultConstructor)$/;"	f
TEST	unittest.cpp	/^TEST(DeviceMatrixTest,Constructor3)$/;"	f
TEST	unittest.cpp	/^TEST(DeviceVectorTest, Constructor1)$/;"	f
TEST	unittest.cpp	/^TEST(DeviceVectorTest, Constructor2)$/;"	f
TEST	unittest.cpp	/^TEST(DeviceVectorTest, Constructor3)$/;"	f
TEST	unittest.cpp	/^TEST(DeviceVectorTest, CopyAssignmentOperator)$/;"	f
TEST	unittest.cpp	/^TEST(DeviceVectorTest, CopyConstructor)$/;"	f
TEST	unittest.cpp	/^TEST(DeviceVectorTest, DefaultConstructor)$/;"	f
TEST	unittest.cpp	/^TEST(DeviceVectorTest, MoveAssignmentOperator1)$/;"	f
TEST	unittest.cpp	/^TEST(DeviceVectorTest, MoveAssignmentOperator2)$/;"	f
TEST	unittest.cpp	/^TEST(DeviceVectorTest, MoveConstructor1)$/;"	f
TEST	unittest.cpp	/^TEST(DeviceVectorTest, MoveConstructor2)$/;"	f
TESTOPTION	makefile	/^TESTOPTION := --gtest_color=yes$/;"	m
TESTTARGET	makefile	/^TESTTARGET := unittest$/;"	m
TEST_P	unittest.cpp	/^TEST_P(DeviceMatrixTest, Constructor1)$/;"	f
TEST_P	unittest.cpp	/^TEST_P(DeviceMatrixTest, Constructor2)$/;"	f
TEST_P	unittest.cpp	/^TEST_P(DeviceVectorTest, set)$/;"	f
TearDown	unittest.cpp	/^	void TearDown(){}$/;"	f	class:DeviceMatrixTest
TearDown	unittest.cpp	/^	void TearDown(){}$/;"	f	class:DeviceVectorTest
bias	Backpropagation.h	/^	std::vector<upDeviceVector> bias;$/;"	m	class:Backpropagation
columnCount	DeviceMatrix.h	/^	unsigned int columnCount;$/;"	m	class:DeviceMatrix
dEdW	Backpropagation.h	/^	std::vector<upDeviceMatrix> dEdW;$/;"	m	class:Backpropagation
dEdb	Backpropagation.h	/^	std::vector<upDeviceVector> dEdb;$/;"	m	class:Backpropagation
device	DeviceMatrix.h	/^	float* device;$/;"	m	class:DeviceMatrix
device	DeviceVector.h	/^	float* device;$/;"	m	class:DeviceVector
df	Backpropagation.h	/^	float df(const float& x)$/;"	f	class:Backpropagation
dimension	DeviceVector.h	/^	unsigned int dimension;$/;"	m	class:DeviceVector
f	Backpropagation.h	/^	float f(const float& x)$/;"	f	class:Backpropagation
forward	Backpropagation.h	/^	void forward(const std::vector<float>& x)$/;"	f	class:Backpropagation
get	DeviceMatrix.h	/^	void get(float* host)$/;"	f	class:DeviceMatrix
get	DeviceMatrix.h	/^	void get(std::vector<float>& host)$/;"	f	class:DeviceMatrix
get	DeviceVector.h	/^	void get(float* const host)$/;"	f	class:DeviceVector
get	DeviceVector.h	/^	void get(std::vector<float>& host)$/;"	f	class:DeviceVector
getAddress	DeviceMatrix.h	/^	float* getAddress() const$/;"	f	class:DeviceMatrix
getAddress	DeviceVector.h	/^	float* getAddress() const$/;"	f	class:DeviceVector
getColumnCount	DeviceMatrix.h	/^	int getColumnCount() const$/;"	f	class:DeviceMatrix
getDimension	DeviceVector.h	/^	unsigned int getDimension() const$/;"	f	class:DeviceVector
getErrorString	CUBLASManager.cpp	/^const char* CUBLASManager::getErrorString(cublasStatus_t error)$/;"	f	class:CUBLASManager
getHandle	CUBLASManager.h	/^	static cublasHandle_t getHandle()$/;"	f	class:CUBLASManager
getInstance	CUBLASManager.h	/^	static CUBLASManager& getInstance()$/;"	f	class:CUBLASManager
getMean	learningTrackData.cpp	/^void getMean(const std::vector<track>& v, track& mean)$/;"	f
getRowCount	DeviceMatrix.h	/^	int getRowCount() const$/;"	f	class:DeviceMatrix
handle	CUBLASManager.h	/^	cublasHandle_t handle;$/;"	m	class:CUBLASManager
init	Backpropagation.cpp	/^void Backpropagation::init(const std::vector<unsigned int>& unit_count)$/;"	f	class:Backpropagation
initRandom	Backpropagation.cpp	/^void Backpropagation::initRandom(void)$/;"	f	class:Backpropagation
layerCount	Backpropagation.h	/^	const unsigned int layerCount;$/;"	m	class:Backpropagation
main	learningTrackData.cpp	/^int main(void)$/;"	f
main	unittest.cpp	/^int main(int argc, char **argv)$/;"	f
obtainUFromZ	Backpropagation.h	/^	void obtainUFromZ(unsigned int l)$/;"	f	class:Backpropagation
obtainZFromU	Backpropagation.h	/^	void obtainZFromU(unsigned int l)$/;"	f	class:Backpropagation
operator =	DeviceVector.h	/^	DeviceVector& operator=(DeviceVector&& dv)$/;"	f	class:DeviceVector
operator =	DeviceVector.h	/^	DeviceVector& operator=(const DeviceVector& dv)$/;"	f	class:DeviceVector
rowCount	DeviceMatrix.h	/^	unsigned int rowCount;$/;"	m	class:DeviceMatrix
set	DeviceMatrix.h	/^	void set(const float* host)$/;"	f	class:DeviceMatrix
set	DeviceVector.h	/^	void set(const float* const host)$/;"	f	class:DeviceVector
set	DeviceVector.h	/^	void set(const std::vector<float>& host)$/;"	f	class:DeviceVector
testCUBLAS	learningTrackData.cpp	/^int testCUBLAS()$/;"	f
testCUBLASClass	learningTrackData.cpp	/^int testCUBLASClass()$/;"	f
testDBAccessor	learningTrackData.cpp	/^int testDBAccessor(void)$/;"	f
testDeviceVector	learningTrackData.cpp	/^int testDeviceVector(void)$/;"	f
track	learningTrackData.cpp	/^using track = std::array<float, 4>;$/;"	u
u	Backpropagation.h	/^	std::vector<upDeviceVector> u;$/;"	m	class:Backpropagation
unitCount	Backpropagation.h	/^	std::vector<unsigned int> unitCount;$/;"	m	class:Backpropagation
upDeviceMatrix	Backpropagation.h	/^	using upDeviceMatrix = std::unique_ptr<DeviceMatrix>;$/;"	u
upDeviceVector	Backpropagation.h	/^	using upDeviceVector = std::unique_ptr<DeviceVector>;$/;"	u
weight	Backpropagation.h	/^	std::vector<upDeviceMatrix> weight;$/;"	m	class:Backpropagation
z	Backpropagation.h	/^	std::vector<upDeviceVector> z;$/;"	m	class:Backpropagation
~CUBLASManager	CUBLASManager.h	/^	virtual ~CUBLASManager()$/;"	f	class:CUBLASManager
~DeviceMatrix	DeviceMatrix.h	/^	~DeviceMatrix()$/;"	f	class:DeviceMatrix
~DeviceVector	DeviceVector.h	/^	~DeviceVector()$/;"	f	class:DeviceVector
